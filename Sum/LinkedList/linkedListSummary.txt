Problems:

Delete
=========
1. Delete that node given only that node 
	> Set the value of current node to next node 
	> Set the node.next = node.next.next;

2. Delete all nodes with specific value 
	> In case of the target exists at the front, use while loop to iterate to the right node 
	> then you point current node to head, while cur!=null && cur.next!=null 
		if cur.next....
		- encounter target val: cur.next = cur.next.next;
		- not target: cur = cur.next;

3. Remove Duplicates from Sorted LinkedList 
Delete all duplicates such that each element appear only once 
	> since the linkedlist is already sorted, so we can took advantage of this, change the != to larger than 
	> similar step as 2. 

4. Remove Nth Node from the End of the list 
Use the fast and slow iterator 
> progress the fast to n place ahead
> then iterator slow (from the start) and fast together, until the fast reach the end of the list 
> then we use the slow to remove the Nth 

5***. Remove Duplicates from Sorted List || 
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the 
original list.



Reverse
========
1. Reverse Linked List
	> a new null head, prev
	> while the current node is not null 
		> create a temporary node to store the next element to be reversed 
		> set the current.next = prev;
		> set prev = current; // point the previous to the current new head;
		> set current = next;  

Intersection
=============
1. Intersection of Two LinkedLists 

	> GET the length of both list A and list B 
	> while(length of A larger than length of B) move headA to its next
	> while(length of B larget than length of B) move headB to its next
	/// now we have both list in the same length 
	> we iterate them together, until we reach same node, 
	> return the same node we found in last step 

Cycle
======
1. LinkedList Cycle
Given a linked list, determine if it has a cycle in it;
> keep both a fast and slow iterator; 

2. LinkedList Cycle II 
Given a linked list, return the node where the cycle begin. If there is no cycle, return null. 
Loop until they meet, then set one of them point to the start of list, when they meet again, 
this time only single step both, they must meet at the start of cycle 


Swap Nodes
==========
1. Given a linked list, swap every two adjacent nodes and returns its head. 
	> keep a dummyhead, reserve the dummyhead.next = head;
	> create a new current node point to dummyhead;
	> while current.next!=null && current.next.next!= null
		> create first and second node 

		> first.next = second.next;
		> current.next = second;
		> second.next = first;
		> current = current.next.next;


Merge
======
1. Merge Two Sorted Lists
> keep a dummyHead, dummyHead.next = head
> create a new node current point to dummyHead
> while l1 !=null or l2 !=null 
	> if(l1==null || l2!=null && l1.val>l2.val){
		current.next = l2;
		l2 = l2.next;
	  }else{
	  	current.next = l1;
	  	l1 = l1.next;
	  }
	  current = current.next;

2. Add Two Numbers 



Reorder
=======
1. Odd Even Linked List

Given a singly linked list, group all odd/even nodes together, the relative order of them cannot be changed 
Do it with O(n) time and O(1) space: 
*** WHAT DOES O(1) SPACE MEAN: 
O(1) space means the algorithm transform the input using a small amount of extra memory. O(1) memory. 
So changing the reference is O(1) space, but create with something like new ... is not 

while(even!=null && even.next!=null){
			odd.next = even.next;
			odd = odd.next;
			even.next = odd.next;
			even = even.next;
		}
		odd.next = evenHead;
		return head;

2. Sort a LinkedList in O(nlog(n)) time using constant space 

A typical merge sort problem, 
> Use the fast and slow iterator to divide the list into two half everytime 
> Recursively merge the previous divided part. 

3. Insertion Sort LinkedList 

Keep record of real head and a pointer to dummy head. 

// from the start, iterate through the list
// remember to keep a record of the next element to iterate 
// everytime we iterate from the start 

4. Reorder List 
Given a linked list: 0 -> 1 -> 2 -> 3 -> 4
Reorder it to: 0 -> 4 -> 1 -> 3 -> 2
This solution is a combination of reverse the list and reorder the list 

reverse the second half of the list then begin to bind the first part and second part together 

**5. Convert Sorted List to Binary Search Tree
Split the tree into two parts, the middle point should be the parent node, and left to the parent
goes to the left tree, right to the parent goes to the right subtree. 

"Split method"

5. Reverse LinkedList II
Reverse a linkedlist from position m to n. 
1->2->3->4->5->null to 1->4->3->2->5->null 

6. Partition List 
Given a linkedlist and a value x, partition it such that all nodes less than x come before nodes greater than 
or equal to x. Preserve the original order of the list. 

keep two dummyheads in partition list and then we can iterate through the linkedlist, 
append smaller ones to the first dummyhead and larger one to the second dummyhead. 

7. Rotate List

Given a list, rotate the list to the right by k places, where k is non-negative 

Should consider the total length of the list and the number k 

1. iterate to the tail of the list, keep a record there 
2. Then compute the k%len and find the real head of the list 
3. set the prev of realhead to null, set the next of the last of original list to to head; 














