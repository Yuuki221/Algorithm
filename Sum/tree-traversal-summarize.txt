============ Tree Traversal Summary ==============

There are 4 mainly types: preorder traversal, In-order traversal, Post-order traversal and Level-order traversal 

1. preorder traversal: 
order: parent --> left --> right
both time complexity is O(N), where N is the number of TreeNodes in the tree. 
----- Recursive Version -------
inorder(TreeNode node){
	visit(node);
	inorder(node.left);
	inorder(node.right);
}

---- Depth First Search Iterative Version ---
iterativePreorder(node){
	if(node==null) return;
	s <-- empty stack
	s.push(node)
	while(not s.isEmpty()){
		node <-- s.pop()
		visit(node) 
		if(node.right != null) s.push(node.right);
		if(node.left != null) s.push(node.left);
	}
}

2. Inorder traversal 
inorder: left --> parent --> right

------- Recursive Solution --------
inorder(node){
	if(node==null) return;
	inorder(node.left);
	visit(node);
	inorder(node.right);
}

------ Iterative Inorder ----------
iterativeInorder(node){
	s is an empty stack
	lastNodeVisited initialized as null 

	while( not s isEmpty || node is not null ){
		if( node is not null ){
			s.push(node);
			node = node.left;
		}else{
			peekNode = s.peek();
			// if right child exists and taversing node 
			// from left child, then move right 
			if(	peekNode.right!=null and lastNodeVisited!=peekNode.right){
				node = peekNode.right;
			}else{
				visit(peekNode);
				lastNodeVisited = s.pop();
			}
		}
	}
}


