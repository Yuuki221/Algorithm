============ Tree Traversal Summary ==============

There are 4 mainly types: preorder traversal, In-order traversal, Post-order traversal and Level-order traversal 

1. preorder traversal: 
order: parent --> left --> right
both time complexity is O(N), where N is the number of TreeNodes in the tree. 
----- Recursive Version -------
inorder(TreeNode node){
	visit(node);
	inorder(node.left);
	inorder(node.right);
}

---- Depth First Search Iterative Version ---
iterativePreorder(node){
	if(node==null) return;
	s <-- empty stack
	s.push(node)
	while(not s.isEmpty()){
		node <-- s.pop()
		visit(node) 
		// remember to push right before push left 
		// so that the left one will pop up first 

		if(node.right != null) s.push(node.right);
		if(node.left != null) s.push(node.left);
	}
}

<<<<<<< HEAD
2. Inorder traversal 
inorder: left --> parent --> right

------- Recursive Solution --------
inorder(node){
	if(node==null) return;
	inorder(node.left);
	visit(node);
	inorder(node.right);
}

------ Iterative Inorder ----------
iterativeInorder(node){
	s is an empty stack
	lastNodeVisited initialized as null 

	while( not s isEmpty || node is not null ){
		if( node is not null ){
			s.push(node);
			node = node.left;
		}else{
			peekNode = s.peek();
			// if right child exists and taversing node 
			// from left child, then move right 
			if(	peekNode.right!=null and lastNodeVisited!=peekNode.right){
				node = peekNode.right;
			}else{
				visit(peekNode);
				lastNodeVisited = s.pop();
			}
		}
	}
}

--------- Iterative Inorder Second Version -----------
iterativeInorder(node){
	s is an empty stack 
	new list represent result
	if(node = null) return result;
	while(cur != null || s is not empty){
		while(cur!=null){
			s push cur;
			cur = cur.left;
		}
		cur = s.pop();
		result.add(cur);
		cur = cur.right;
	}
}

=======
3. postorder traversal 
order: left --> right --> parent 
both time complexity is O(N) as well 

----- Recusive Version ------
postorder(TreeNode node){
	if (node==null) return;
	postorder(node.left);
	postorder(node.right);
	visit(node);
}

----- Depth First Search ------- 
postorder(TreeNode node){
	s <-- empty stack;
	declare result;
	while(s is not empty){
		cur = s.pop();
		// you add to the first/front place of your result 
		result.addFirst(cur);
		if(cur.left!=null) s.push(cur.left);
		if(cur.right!=null) s.push(cur.right);
	}
	return result;
}


>>>>>>> c4a8e47173c792cfcf6245ebc34bd9694644f81a

