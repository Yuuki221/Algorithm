Rearrange: 
=============
1. Move Zeroes: Given an array nums, write a function to move all 0s to the end of it while maintaining the relative order of the non-zero elements. 

> Do not need to remove reorder the array, 
> keep two pointers, only plus one the former pointer when meet non-zero element and iterate through the array use the second pointer
** Be carefule for the increase of i twice trap

Find Target:
===========
1. Contains Duplicate II
Given an array of integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k. 

 // Use hashtable 
> going through the array, put numbers in a hashtable, distinct number as hashtable keys and new duplicate index as value; 
> as updating the hashtable, if find any value larger than k, then return true; 

2. Contains Duplicate I
Given an array of integer, find if the array contains any duplicates. Your function should return true if any value appears at least twice in array , and it should return false if every element is distinct. 

> use a set to keep track of distinct memebers. 
> if found a duplicate then return true; 

Majority Element
================
1. Majority Element 
Given an array of size n, find the majority element. The majority element is the element that appears more than [n/2] times. 
Assume that the non-empty and the majority element always exist in the array

> sort and peak the middle item 
> Moore voting algorithm: 

2. Majority Element II
Given an integer array of size n, find all elements that appear more than [n/3] times. The algorithm should run in linear time and in O(1) space 

for general solution : 
http://www.geeksforgeeks.org/given-an-array-of-of-size-n-finds-all-the-elements-that-appear-more-than-nk-times/


Dynamic Difference Problem 
===========================
1. Best Time to Buy and Sell Stock
You have an array for which the ith element is the price of stock on day i. 

If you were only permitted to complete at most one transaction. 

> keep two global vars, first one is the smallest element so far, second is the largers profit so far 
> iterate through the array 

/|\ 08/29/16

Pascal Triangle
===============
1. Pascal one 
Given numRows, generate the first numRows of Pascal's triangle. 

Some facts: 
> row i (i starts from 0), has (i+1) length of element. 
> row[i][j] = row[i-1][j-1] + row[i-1][j], except when j=0 and j=i;

2. Pascal row 
Given an index k, return the kth row of the Pascal's triangle 
use only O(k) extra space 
[ start from the BACK!!! IMPORTANT ]

Merge Sort
==========
1. Given two sorted integer arrays num1 and num2, merge num2 into num1 as one sorted array.
> start from the back, since you can see the value will not be affected in this way. 
[ start from the BACK!!! IMPORTANT ]

Plus One
========
1. Given a non-negative number represented as an array of digits, plus one to the number. 
Most significant digit is at the head of the list 

the logic of the problem is important, organize your code. 

Remove Element
============== 
1. Given an array and a value, remove all instances of that value in place, return the new length; 
Order of element can be changed 

2. Remove Duplicates from Sorted Array
Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length
Do it in place 

Sum Problem
===========
1. Given an array of integers, return indices of the two numbers such that they add up to specific target. 
Assume each input would have exactly one solution 

> use hashmap, since it require to return the original index value 
> check the sum counterpart 

08/30/2016
2d array updating via neighbours
================================
1. Game of Life
Board with m by n cells, updating the cells accroding to its 8 neighbours, in-place, updating at the same time 

> update row by row, 
> record the status of CHANGE, 
from live to live 1, from death to death 0, from live to death -1, from death to live 2; 
[Status Recording Method, Be careful for the conditional status]. 

> short-circuit mistake: http://stackoverflow.com/questions/2100758/javascript-or-variable-assignment-explanation

08/31/2016
Wiggle Sort
============
1. Wiggle Sort I: Given an unsorted array nums, reorder it in-place such that 
nums[0] <= nums[1] >= nums[2] <= nums[3] ....
complete the problem in-place

/*
 	two conditions: 
 	1) if the index is odd, nums[i] >= nums[i-1]
 	2) if the index is even, nums[i] <= nums[i-1]
 	so we reorder the array to satify these condition 
 */

 Missing Number
 ==============
 1. Missing Number: 
 Given an array containing n DISTINCT numbers taken from 0,1,2,3,4,5,...,n, find the one that is missing from the array 

 run in linear runtime 

 09/01/2016
 Product of Array Except Self
 ============================
 Given an array of n integers where n>1, nums, return an array output such that output[i] is equal to the product of all the elements
 of nums except nums[i]. Solve it without division and in O(n). Use constant space, output array does not count in space analysis. 

 > create the result array 
 > iterate twice, first from the start and second from the end, compute the product so far and multiply them together 

 09/02/2016
 Summary Ranges
 ==============
 Given a sorted integer array without duplicates, return the summary of its ranges
 For instance, [0,1,2,4,5,7], return ["0"->"2", "4->5", "7"];

 Minimum Size Subarray Sum
 ==========================
 Given an array of n positive integers and a positive integer s, find the mininal length of a subarray of which the sum>=s. If there isn't one, return 0 instead. 

 method1> keep a window and slide the window through the array 
 methid2> binary search 


09/04/2016
Find Peak Element 
=================
A peak element is an element that is greater than its neighbors, Given an input array where num[i]!=num[i+1], find a peak element and return
its index. The array may contain multiple peaks, in that case return the index to any one of the peaks is fine. 
Assume num[-1] = num[++] = minus infinity 

> rearrange the array into [the later element - previous element], 
> method1: check the minus array if current element positive and later element negative, find the target, 
> method2: use binary search to find the target 


Find Minimum in Rotated Sorted Array
====================================
A sorted array is rotated at some pivot unknown, (i.e [0,1,2,3,4,5,6,7] ---> [4,5,6,7,0,1,2]), 
Find the minimum element, assume no duplicate exists in the array. 

> search directly
> binary search, be careful the checking case 


09/05
=====
/\/\/\/\/\/\/\/\/\/\/\/\/\
Maixmum Product Subarray 
------------------------
Find the contiguous subarray within an array (containing at least one number) which has the largest product (the array may contain negative number )

> Dynamic Programming: 
> keep a positive minimum and negative minimum and a global product 

Best Time to Buy and Sell Stock II 
----------------------------------
Say you have an array for which the ith element is the price of a given stock on day i, 

/\/\/\/\
Triangle
--------

09/06
=====
/\/\/\/\/\/\/\/\/\/\
Remove Duplicates from Sorted Array II
---------------------------------------
Check every two elements, two elements as a group 

/\/\/\/\/\/\
Word Search 
-----------

/\/\/\/\/\/\
Sort Colors
-----------

09/07
=====
/\/\/\/\/\/\/\/\/\
Search a 2D Matrix
------------------

Set Matrix Zeroes
-----------------

/\/\/\/\/\/\/\/\/\ Dynamic Programming 
Minimum Path Sum
----------------

/\/\/\/\/\/\/\/\/\/\ Dynamic Programmin 
Unique PathI && Unique PathII 
-----------------------------


/\/\/\/\/\/\/\/ 
Spiral Matrix I
---------------


09/08
/\/\/\/\/
Jump Game
========= 

/\/\/\/\/\/\/\/\
Maximum Subarray 
================ Dynamic programming 


/\/\/\/\/\/\/\/\/\/\/\
Search Insert Position
====================== Binary Search: be careful the high index case 

09/10

Summary of Permute the elements of an array 

permelement.js


09/12
/\/\/\/\/\/\/\/\/\
Search for a Range
==================
searchforrange.js

for nums[mid]===target condition, be careful about the index 

/\/\
4Sum
====
4sum.js

sort the array,
keep record, 
***
copy by value in javascript 

some insights in the time complexity: https://discuss.leetcode.com/topic/27445/lower-bound-Ï‰-n-3

both recursive and iterative solution 

/\/\/\/\/\/\/\/\
Next Permutation
================

09/13
/\/\/\/\/\/\
3Sum Closet
===========
keep a fixed element, and then keep two pointers to move around, similar to the method of 4Sum 

/\/\
3Sum 
====

/\/\/\/\/\/\/\/\/\/\/\/\/
Container With Most Water
=========================














 




















 

















